from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import link
import json
from os.path import isfile
from re import sub

bot = Bot(token='7683497463:AAF2vxBAkM0zNpya3dUEUqx_EFo6-GHswSw')
dp = Dispatcher(bot)
channels = [-1002065937026, -1002233290926]  # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
admins = [505655010, 958883427]

# –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∑–¥–µ—Å—å
winner_id = "5870409794"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def load_participants():
    if isfile('participants.malw'):
        with open('participants.malw', 'r') as file:
            return json.loads(file.read())
    else:
        return []

def save_participants(participants):
    with open('participants.malw', 'w') as file:
        file.write(json.dumps(participants))

participants = load_participants()


@dp.message_handler(commands='start')
async def start(message: types.Message):
    global participants, channels
    user_id = str(message['from']['id'])

    if user_id in participants:
        await message.reply('*üéâ –¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏ üòéüéÆ', parse_mode='markdown', disable_web_page_preview=True)
        return

    not_subscribed_channels = []
    for channel in channels:
        try:
            user_info = await bot.get_chat_member(channel, message['from']['id'])
            if user_info['status'] not in ['member', 'creator', 'administrator']:
                raise
        except Exception as e:
            channel_info = await bot.get_chat(channel)
            not_subscribed_channels.append(link(channel_info['title'], 'https://t.me/' + channel_info['username']))
    
    if not_subscribed_channels:
        message_text = "‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(not_subscribed_channels)
        await message.reply(message_text + "\n–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Ç—ã *–æ–±—è–∑–∞–Ω* –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ *–æ–±–∞* –∫–∞–Ω–∞–ª–∞ü§û.\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ */start*", parse_mode='markdown', disable_web_page_preview=True)
        return

    participants.append(user_id)
    save_participants(participants)
    await message.reply('üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞! *–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏üçÄ*', parse_mode='markdown', disable_web_page_preview=True)

@dp.message_handler(commands='check')
async def check(message: types.Message):
    global participants, channels
    if message['from']['id'] in admins:
        for participant in participants:
            for channel in channels:
                try:
                    user_info = await bot.get_chat_member(channel, participant)
                    if user_info['status'] not in ['member', 'creator', 'administrator']:
                        raise
                except Exception as e:
                    channel_info = await bot.get_chat(channel)
                    try:
                        await bot.send_message(
                            participant,
                            '‚ö†Ô∏è –¢—ã –≤—ã—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞ ' + link(channel_info['title'], 'https://t.me/' + channel_info['username']) +
                            ', –ø–æ—ç—Ç–æ–º—É –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üòî',
                            parse_mode='markdown', disable_web_page_preview=True
                        )
                    except:
                        pass
                    participants.remove(participant)
                    break
        save_participants(participants)
        await message.reply('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.', disable_web_page_preview=True)

@dp.message_handler(commands='end')
async def end(message: types.Message):
    if message['from']['id'] in admins:
        winner_name = await bot.get_chat(winner_id)
        for ts in sub('[A-Za-z–ê-–Ø–∞-—è0-9 ]', '', winner_name['first_name']):
            winner_name['first_name'] = winner_name['first_name'].replace(ts, '')
        if winner_name['first_name'].replace(' ', '') == '':
            winner_name['first_name'] = '–ü—É—Å—Ç–æ–π –∏–ª–∏ –∑–∞—Å—Ä–∞–Ω–Ω—ã–π –Ω–∏–∫'
        if 'username' in winner_name:
            name = link(winner_name['first_name'], 'https://t.me/' + winner_name['username']) + '\n'
        elif not "has_private_forwards" in winner_name:
            name = link(winner_name['first_name'], 'tg://user?id=' + winner_id) + '\n'
        else:
            name = winner_name['first_name'] + ' (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å)' + '\n'
        for participant in participants:
            try:
                await bot.send_message(participant, 
                    f'*üéâ –ú–∞—Å—à—Ç–∞–±–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É! ü•≥*\n–°–∏—Å—Ç–µ–º–∞ –≤—ã–±—Ä–∞–ª–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {name}\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ [R&M STORE](https://t.me/romangame36), [XTATi | MUSIC üéµ](https://t.me/xtatimusic) –∏ –∂–¥–∏—Ç–µ –Ω–æ–≤—ã–µ *—Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å –∫—Ä—É—Ç—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏! üïπÔ∏è*',
                    parse_mode='Markdown', disable_web_page_preview=True)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant}: {e}")
        
        await message.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!', disable_web_page_preview=True)
            
       

@dp.message_handler(commands='testend')
async def testend(message: types.Message):
    if message['from']['id'] in admins:
        winner_name = await bot.get_chat(winner_id)
        for ts in sub('[A-Za-z–ê-–Ø–∞-—è0-9 ]', '', winner_name['first_name']):
            winner_name['first_name'] = winner_name['first_name'].replace(ts, '')
        if winner_name['first_name'].replace(' ', '') == '':
            winner_name['first_name'] = '–ü—É—Å—Ç–æ–π –∏–ª–∏ –∑–∞—Å—Ä–∞–Ω–Ω—ã–π –Ω–∏–∫'
        if 'username' in winner_name:
            name = link(winner_name['first_name'], 'https://t.me/' + winner_name['username']) + '\n'
        elif not "has_private_forwards" in winner_name:
            name = link(winner_name['first_name'], 'tg://user?id=' + winner_id) + '\n'
        else:
            name = winner_name['first_name'] + ' (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å)' + '\n'
        await message.reply('*üéâ –ú–∞—Å—à—Ç–∞–±–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É! ü•≥*\n–°–∏—Å—Ç–µ–º–∞ –≤—ã–±—Ä–∞–ª–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî ' + name +'\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ [R&M STORE](https://t.me/romangame36), [XTATi | MUSIC üéµ](https://t.me/xtatimusic) –∏ –∂–¥–∏—Ç–µ –Ω–æ–≤—ã–µ *—Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å –∫—Ä—É—Ç—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏! üïπÔ∏è*', parse_mode='Markdown', disable_web_page_preview=True)
        
@dp.message_handler(commands='list')
async def list(message: types.Message):
    global participants
    if message['from']['id'] in admins:
        if participants == []:
            await message.reply('üö´ –í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç! ü§∑‚Äç', disable_web_page_preview=True)
            return
        list_output = 'üìú –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n'
        for participant in participants:
            participant_info = await bot.get_chat(participant)
            for ts in sub('[A-Za-z–ê-–Ø–∞-—è0-9 ]', '', participant_info['first_name']):
                participant_info['first_name'] = participant_info['first_name'].replace(ts, '')
            if participant_info['first_name'].replace(' ', '') == '':
                participant_info['first_name'] = '–ü—É—Å—Ç–æ–π –∏–ª–∏ –∑–∞—Å—Ä–∞–Ω–Ω—ã–π –Ω–∏–∫'
            if 'username' in participant_info:
                list_output += link(participant_info['first_name'], 'https://t.me/' + participant_info['username']) + '\n'
            elif not "has_private_forwards" in participant_info:
                list_output += link(participant_info['first_name'], 'tg://user?id=' + participant) + '\n'
            else:
                list_output += participant_info['first_name'] + ' (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å)' + '\n'
        await message.reply(list_output, parse_mode='markdown', disable_web_page_preview=True)

executor.start_polling(dp, skip_updates=True)
